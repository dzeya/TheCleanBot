name: Deploy to Staging

# Controls when the workflow will run
on:
  # Triggers the workflow on push events to the develop branch
  push:
    branches: [ "develop" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Build job for staging
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'package.json'
      
      # Install dependencies
      - name: Install dependencies
        run: npm install
      
      # Build the project
      - name: Build
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.STAGING_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.STAGING_SUPABASE_ANON_KEY }}
          ENVIRONMENT: staging
          
      # Set up Python for API part
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      # Install Python dependencies
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

  # Deploy to staging
  deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    # Only run after build job passes
    needs: [build]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      
      # Deploy to Vercel
      - name: Deploy to Vercel (Staging)
        run: |
          echo "This is where you would deploy to your staging environment"
          echo "For example, using Vercel CLI:"
          # vercel --token=${{ secrets.VERCEL_TOKEN }} 